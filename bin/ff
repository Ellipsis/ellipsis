#!/usr/bin/env python

import argparse
import codecs
from datetime import datetime
import errno
import json
import os
import sys

CONFIG_DIR = '~/.ff'
DATE_FORMAT = "%Y%m%d%H%M"
PROFILE = '~/Library/Application Support/Firefox/Profiles/ah5u2jfa.default'


class AttrDict(dict):
    def __getattr__(self, name):
        if name.startswith('_') or name == 'trait_names':
            raise AttributeError
        return self[name]


class Session(object):
    def __init__(self, data):
        self.data = data

    def itertabs(self):
        for window in self.data.windows:
            for tab in window.tabs:
                yield tab

    @property
    def tabs(self):
        return list(self.itertabs())


def format_date(timestamp=None):
    if timestamp:
        dt = datetime.fromtimestamp(float(timestamp))
    else:
        dt = datetime.now()
    return dt.strftime(DATE_FORMAT)


def make_dir(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno == errno.EEXIST:
            pass


def load_session():
    with open(os.path.join(os.path.expanduser(PROFILE), 'sessionstore.js')) as f:
        return Session(json.load(f, object_hook=AttrDict))


def save_session():
    import shutil
    cfg_dir = os.path.expanduser(CONFIG_DIR)
    make_dir(cfg_dir)
    current_session = os.path.join(os.path.expanduser(PROFILE), 'sessionstore.js')
    shutil.copy(current_session, os.path.join(cfg_dir, format_date() + '.js'))


def list_command(args=None):
    session = load_session()
    for tab in session.tabs:
        for entry in tab.entries:
            try:
                print entry.title, '-', entry.url
            except KeyError:
                pass


def read_command(args):
    import requests
    from readability.readability import Document
    import html2text
    h = html2text.HTML2Text()
    h.inline_links = False
    h.ignore_images = True
    h.ignore_emphasis = True
    res = requests.get(args.url)
    if res.ok:
        article = Document(res.content)
        print article.short_title()
        print h.handle(article.summary())
    else:
        print res.headers['status']


def save_command(args):
    save_session()

if __name__ == '__main__':
    sys.stdout = codecs.getwriter('UTF-8')(sys.stdout)
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # list command
    list_parser = subparsers.add_parser('list', help='List open tabs')
    list_parser.set_defaults(command=list_command)

    # save command
    save_parser = subparsers.add_parser('save', help='Save current session')
    save_parser.set_defaults(command=save_command)

    # read command
    read_parser = subparsers.add_parser('read', help='read url')
    read_parser.add_argument('url', action='store', help='Url to add')
    read_parser.set_defaults(command=read_command)

    if sys.argv[1:]:
        args = parser.parse_args()
        command = args.command
        command(args)
    # else:
    #     list_command()
